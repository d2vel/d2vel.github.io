<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Serverless Scale</title>
    <url>/2022/04/30/Serverless-Scale/</url>
    <content><![CDATA[<img src="/2022/04/30/Serverless-Scale/hurdle.jpg" class="" title="허들이미지">

<p>이번에는 서버리스를 도입하고 운영하기 위해서 어떤 점들을 고려해봐야 하는지에 대해서 작성해 보았습니다. </p>
<span id="more"></span>

<p>이번에는 서버리스에 대해서 한번 살펴보고자 한다. 대학교 때부터 이런 이야기를 IT에서 자주 들어왔던 것 같다. 뭔가를 동작하게 하는 것은 쉽지만 잘 동작하게 하는 것은 매우 어려운 일이다. 이것은 특히 회사에서 공감을 많이 하게 되는 말이었다. 회사에서 항상 뭔가를 하다보면 POC&#x2F;BMT 레벨에서는 문제가 없었지만 실제 운영에서는 문제가 생기는 경우를 많이 보았다. 대부분은 생각하지 못했던 예외 케이스와 미리 생각하지 못했던 부하에서 문제많이 생겼다.</p>
<p>두 번째 하고 싶은 이야기는 언제나 새로운 기술의 도입에는 허들이 있다는 것이다. Spring Boot, JPA, DDD등 모두가 그랬다. JPA를 처음 사용하려고 교육에 갔을 때 강사가 했던 말은 “JPA는 성능이 좋지 않기 때문에 실제 SI환경에서는 사용하지 않습니다.” 였습니다. 이 말을 듣고 실제 이것의 성능이 그렇게 좋지 않다면 외국에서 이것을 많이 사용할까 였습니다. 하지만 JPA를 사용하면서도 성능을 유지하려면 CQRS 및 Query DSL등에 대한 지식도 같이 있어야 성능의 문제를 해결 수 있었습니다. 말씀 드렸다시피 어떤 시도가 성공의 괘도에 오르려면 허들을 넘는 것은 필수 입니다. <strong>허들을 넘지 못하면 새로움은 없습니다.</strong> 또한 대부분의 허들을 넘지 못하는 사람들이 하는 말은 그 기술은 좋지 않다입니다. ㅠㅠ</p>
<h2 id="서버리스"><a href="#서버리스" class="headerlink" title="서버리스"></a>서버리스</h2><p>서버리스는 말 그래도 서버가 없다는 말이다. 하지만 실제로 서버가 없지는 않겠죠? 이 말은 서버를 별도로 관리할 필요가 없다는 것이다. 서버를 만들 필요도 서버의 최신 버젼을 유지한다거나 서버를 패치해야 할 필요도 없다. 일반적으로 아주 간단하게 말하면 서버의 Scale도 관리할 필요는 없습니다. <strong>하지만 고려해야 할 필요는 있습니다.</strong>.</p>
<p>많은 CSP등 혹은 K8S도 서버리스에 대한 서비스를 제공하고 있습니다.</p>
<p>ç</p>
<p>AWS 서비스들을 보면 그 중심에 Lambda가 있습니다. 당연히 서버리스를 사용해서 서비스를 만든다면 일단 이들에 대해서 정확하게 하는 것이 필요합니다.</p>
<h3 id="서버리스-도입-및-운영의-장점"><a href="#서버리스-도입-및-운영의-장점" class="headerlink" title="서버리스 도입 및 운영의 장점"></a>서버리스 도입 및 운영의 장점</h3><p>서버리스는 일반적으로 다른 서비스에 비해 일반적인 상황에서 운영에 대해 고려할 것이 적습니다. 실제 시스템의 패치 및 부하에 따른 고려, 또한 시스템의 구성 등에 시간이 적게 들어갑니다. 대표적인 서버리스 compute 컴포넌트인 lambda의 경우를 예를 들어 설명해 보면 Serverless Framework이나 SAM을 활용하면 매우 짧은 시간 안에 시스템의 구성이 가능합니다.</p>
<p>또한 Dyanmodb &#x2F; Amplify &#x2F; Cognito 등과 같이 사용을 할 때는, Compute 뿐만 아니라 Database &#x2F; Auth들의 구현도 매우 짧은 시간 안에 구현할 수 있습니다.</p>
<img src="/2022/04/30/Serverless-Scale/2022-04-30T173334.png" class="" title="This is an example image">

<h3 id="서버리스를-도입할-때-고려해야-할-것들"><a href="#서버리스를-도입할-때-고려해야-할-것들" class="headerlink" title="서버리스를 도입할 때 고려해야 할 것들"></a>서버리스를 도입할 때 고려해야 할 것들</h3><p>하지만 일반적인 상황에서 서버리스가 매우 빠른 다른 이야기 입니다. 갑작스럽게 부하게 엄청 많이 증가하는 상황이라든지 혹은 엄청 연산이나 처리가 길어지는 경우에는 컨드롤하기 어려운 단점이 존재합니다. 또한 lambda의 경우는 요청 수행시간에 따라 Concurrency가 매우 많은 영향을 받습니다. 또한 기본적으로 Account Quota가 아래와 같이 설정되어 있습니다.</p>
<table>
<thead>
<tr>
<th>Resource</th>
<th align="right">Default quota</th>
<th align="center">Can be increased up to</th>
</tr>
</thead>
<tbody><tr>
<td>Concurrent executions</td>
<td align="right">1,000</td>
<td align="center">Tens of thousands</td>
</tr>
<tr>
<td>Storage for uploaded functions (.zip file archives) and layers. Each function version and layer version consumes storage. <br /><br /> For best practices on managing your code storage, see Monitoring Lambda code storage in the Lambda Operator Guide.</td>
<td align="right">75 GB</td>
<td align="center">Terabytes</td>
</tr>
<tr>
<td>Storage for functions defined as container images. These images are stored in Amazon ECR.</td>
<td align="right">See Amazon ECR service quotas.</td>
<td align="center"></td>
</tr>
<tr>
<td>Elastic network interfaces per virtual private cloud (VPC)<br />Note<br />This quota is shared with other services, such as Amazon Elastic File System (Amazon EFS). See Amazon VPC quotas.</td>
<td align="right">250</td>
<td align="center">Hundreds</td>
</tr>
</tbody></table>
<p>위와 같이 스케일이 제한되어 있기 때문에 특별히 Burst 상황이 생길 여지가 있는 곳에서는 고려해야 할 것 들이 생기게 됩니다. 아래는 특별히 lambda의 부하 및 구성관점에서 어떠한 것들을 고려해야 하는지 알아보도록 하겠다.</p>
<h4 id="큰-API는-Lambda를-Account로-분리해야-한다"><a href="#큰-API는-Lambda를-Account로-분리해야-한다" class="headerlink" title="큰 API는 Lambda를 Account로 분리해야 한다."></a>큰 API는 Lambda를 Account로 분리해야 한다.</h4><img src="/2022/04/30/Serverless-Scale/2022-04-30T175208.png" class="" title="This is an example image">

<p><a href="https://aws.amazon.com/ko/blogs/compute/managing-cross-account-serverless-microservices/">https://aws.amazon.com/ko/blogs/compute/managing-cross-account-serverless-microservices/</a> 참조</p>
<p>위와 같이 Account로 분리해서 부하를 받아줄 수 있도록 분산해야 합니다. 하지만 이를 위해서 CI&#x2F;CD Pipeline 구성의 복잡도를 포함해야 합니다. 이에 대해서는 아래와 같이 좀더 자세히 기술하도록 하겠습니다.</p>
<h4 id="짧은-Lambda-수행시간"><a href="#짧은-Lambda-수행시간" class="headerlink" title="짧은 Lambda 수행시간"></a>짧은 Lambda 수행시간</h4><p>1,000 Concurrency는 많은 수이지만 경우에 따라서는 매우 작은 숫자일 수도 있습니다.이 한계 안에서 Lambda를 활용하기 위해서는 Lambda의 수행시간을 가능하면 짧게 가져가야 합니다. 이를 위해서 EDA(Event Driven Architecure)와 함께 Nosql(Dynamodb)를 활용하여 처리시간을 짧게 가져가야 합니다.</p>
<img src="/2022/04/30/Serverless-Scale/2022-04-30T180532.png" class="" title="This is an example image">

<p>참고: <a href="https://aws.amazon.com/ko/blogs/compute/operating-lambda-understanding-event-driven-architecture-part-1/">https://aws.amazon.com/ko/blogs/compute/operating-lambda-understanding-event-driven-architecture-part-1/</a></p>
<h4 id="Cold-Start"><a href="#Cold-Start" class="headerlink" title="Cold Start"></a>Cold Start</h4><p>Lambda의 경우 기본적으로 내부적으로는 Container를 활용하기 때문에 실제로는 서버가 필요합니다. 실제 요청을 받고 서버가 준비되기 전까지의 시간이 필요하며, 이를 Cold Start라고 합니다. 요청이 매우 빨리 늘어나는 경우에는 Cold Start가 서비스에 영향을 미칠 수도 있습니다. 그렇기 때문에 이를 줄이기 위한 노력이 필요합니다. 여러가지가 있지만 지금은 이것을 위해서 가능한 패키지 되는 용량이 작아야 하며, 가능한 무겁지 않도록 프로그램을 작성해야 하다 정도를 생각하시면 됩니다. 추후 다른 아티클에서 어떻게 Cold Start를 제거 하는지 확인해보도록 하겠습니다.’</p>
<h4 id="짧은-수행시간을-위한-Tip"><a href="#짧은-수행시간을-위한-Tip" class="headerlink" title="짧은 수행시간을 위한 Tip"></a>짧은 수행시간을 위한 Tip</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AWS</span> = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"><span class="comment">// http or https</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> agent = <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123;</span><br><span class="line">    <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Infinity is read as 50 sockets</span></span><br><span class="line">    <span class="attr">maxSockets</span>: <span class="title class_">Infinity</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">AWS</span>.<span class="property">config</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">httpOptions</span>: &#123;</span><br><span class="line">    agent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Multi-acount-Ci-x2F-cd-구성"><a href="#Multi-acount-Ci-x2F-cd-구성" class="headerlink" title="Multi acount Ci&#x2F;cd 구성"></a>Multi acount Ci&#x2F;cd 구성</h4><h4 id="Lambda의-배포-Dependency의-해결"><a href="#Lambda의-배포-Dependency의-해결" class="headerlink" title="Lambda의 배포 Dependency의 해결"></a>Lambda의 배포 Dependency의 해결</h4>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Lambda</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>MSA 도입하지 마라</title>
    <url>/2022/04/30/MSA%20%EB%8F%84%EC%9E%85%ED%95%98%EC%A7%80%20%EB%A7%88%EB%9D%BC/</url>
    <content><![CDATA[<img src="/2022/04/30/MSA%20%EB%8F%84%EC%9E%85%ED%95%98%EC%A7%80%20%EB%A7%88%EB%9D%BC/2022-04-30T204459.png" class="" title="MSA">

<p>이런 이야기를 나도 할 줄은 몰랐다. 살아가다 보면 왠지 어렵지만 해야 될 것 같은 일들이 있다. 그거 안하면 다른 사람들 보다 뒤로 쳐지는 것 같고 그래서 꼭 해야 하는데 너무 어렵고 그리고 어렵게 따라 했는데 나에게 그렇게 큰 영향이 없는 일….</p>
<p>지금 이야기를 하려고 하는 것이 그런 것 같다. 이제 최근도 아닌 이야기가 되었지만 아키덱쳐 세계에서 큰 화두였다. 그리고 많은 기술력 있는 기업들은 MS를 도입하여 많은 기술적인 장점들을 취했다. 대표적인 기업들이 아마도 Netflix&#x2F;amazon일 것 같다. 그리고 더 찾아보면 있을 것 같기도 하다. pivotal?? </p>
<p>그리고 국내기업들도 이를 도입하고 있고, 이를 도입해서 잘 활용도 하고 있으며 지속적으로 도입을 검토하고 시도하고 있는 기업들이 많이 존제 한다. </p>
<h2 id="MSa란-무엇인가"><a href="#MSa란-무엇인가" class="headerlink" title="MSa란 무엇인가?"></a>MSa란 무엇인가?</h2><h2 id="MSa를-도입하기-전에-고려해-보아야-하는-것"><a href="#MSa를-도입하기-전에-고려해-보아야-하는-것" class="headerlink" title="MSa를 도입하기 전에 고려해 보아야 하는 것"></a>MSa를 도입하기 전에 고려해 보아야 하는 것</h2><h2 id="살펴볼-수-있는-다른-대안들"><a href="#살펴볼-수-있는-다른-대안들" class="headerlink" title="살펴볼 수 있는 다른 대안들"></a>살펴볼 수 있는 다른 대안들</h2><h2 id="왜-많은-기업들이-실패하나"><a href="#왜-많은-기업들이-실패하나" class="headerlink" title="왜 많은 기업들이 실패하나?"></a>왜 많은 기업들이 실패하나?</h2><h2 id="그럼-어떻게-접근해야-하는가"><a href="#그럼-어떻게-접근해야-하는가" class="headerlink" title="그럼 어떻게 접근해야 하는가?"></a>그럼 어떻게 접근해야 하는가?</h2>]]></content>
      <categories>
        <category>Architecure</category>
      </categories>
      <tags>
        <tag>MSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda with Typescript</title>
    <url>/2022/05/01/Lambda%20with%20Typescript/</url>
    <content><![CDATA[<p>아 배타지만 이제 들어왔다. SAM에서 Lambda Typescript를 지원한다. 이것을 한번 번역해보겠습니다.</p>
<p><a href="https://aws.amazon.com/blogs/compute/building-typescript-projects-with-aws-sam-cli/">https://aws.amazon.com/blogs/compute/building-typescript-projects-with-aws-sam-cli/</a></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Lambda</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Getting Started with Event-Driven Architecture</title>
    <url>/2022/05/01/Getting%20Started%20with%20Event-Driven%20Architecture/</url>
    <content><![CDATA[<img src="/2022/05/01/Getting%20Started%20with%20Event-Driven%20Architecture/2022-05-02T080133.png" class="" title="MSA">

<p>참조 : <a href="https://aws.amazon.com/ko/blogs/compute/getting-started-with-event-driven-architecture/">https://aws.amazon.com/ko/blogs/compute/getting-started-with-event-driven-architecture/</a></p>
<p>간단하게 이벤트 드리븐 아키텍쳐에 대해서 알아봅시다.</p>
<span id="more"></span>

<p>현대적인 어플리케이션에서 Event Driven 아키텍쳐는 클라우드에서 어플리케이션을 좀 더 쉽게 만들수 있게 해주기 때문에 더욱 중요해지고 있다. Event Driven 아키텍쳐는 서비스들을 decouple 할 수 있게 되므로, 개발 속도를 향상 시키고, 어플리케이션의 디버깅을 좀 더 쉽게 합니다. 또한 이 아키텍쳐는 기능이 여러 팀안에서 확장될 때 병목현상(bottlenect)를 제거하고 이것은 팀이 좀 더 독립적으로 개발을 진행할 수 있도록 합니다.</p>
<p>프로그램이 어떻게 동작하는가 생각할 수 있는 한 가지 방법은 어플리케이션의 다른곳으로 부터 발생하는 이벤트에 반응하는 시스템으로 보는 것입니다. 이같은 접근은, 이벤트 전달자로써 그것을 둘러쌓고 있는 것들과 시스템의 상호작용에 초점을 맞춥니다. 어플리케이션은 이벤트를 받고 이벤트를 만들어낸다. 애플리케이션으로의 입력과 애플리케이션으로 부터의 출력은 이벤트로써 동작합니다. 이것이 Event Driven 아키텍쳐의 핵심입니다.</p>
<h2 id="API-Driven-architecture-vs-Event-Driven-architecture"><a href="#API-Driven-architecture-vs-Event-Driven-architecture" class="headerlink" title="API-Driven architecture vs Event-Driven architecture"></a>API-Driven architecture vs Event-Driven architecture</h2><table>
<thead>
<tr>
<th>Commands&#x2F;APIs</th>
<th>Events</th>
</tr>
</thead>
<tbody><tr>
<td>Synchronous</td>
<td>Asynchronous</td>
</tr>
<tr>
<td>Has an Intent</br>Driected to a target</td>
<td>It’s a fact</br>Happened in the past</td>
</tr>
<tr>
<td>“CreateAccount”</br>“AddProduct”</td>
<td>“AccountCreated”</br>“RoductAdded”</td>
</tr>
</tbody></table>
<p>응답과 요청을 기반으로 하는 API Driven 아키텍쳐는 여러 컴포넌트들이 함께 동작할 수 있게 해주는 애플리케이션을 만드는 일반적인 방법이다. 예를 들어, 주문 API로 부터 주문의 쿼리를 요청한다면, 주문 API는 주문리스트를 반환할 것이다. 이것은 동기적인 아키텍텨의 예제이다. 주문을 요청하는 시스템은 응답을 기다립니다. 응답이 오기 전에는 다른 곳으로 이동할 수가 없습니다. 이같은 접근에서는 명령어를 직접적으로 Target에 보냅니다.(예를 들어, “place this order” 또는 “add this record to the database”).</p>
<img src="/2022/05/01/Getting%20Started%20with%20Event-Driven%20Architecture/2022-05-02T083202.png" class="" title="sync and async">

<p>이러한 동기화 모델 안에서, 클라이언트는 Service A로 요청을 한다. Service A는 Service B를 호출한다. 그러나 Service A는 계속 진행하거나 이벤트의 응답을 보내기 전에, Service B의 응답을 기다린다.</p>
<p>비동기인 Event Driven 아키텍쳐에서는 응답 경로가 없습니다. 서비스는 이벤트를 발생시킨 후 즉시 다음으로 이동합니다. 여기서의 Trade-off는 이벤트를 수신했다는 것외에 Service A로 정보를 전달하기 위한 Service B에 대한 직접적인 채널이 없다는 것이다. 그러나 많은 경우에 요청 채널과 응답 채널 간에 명시적인 결합(coupling)이 필요하지 않습니다.</p>
<p>이벤트는 이미 발생한 어떤 것입니다. 예를 들어, 새로운 계정이 생성되었거나(is created), Amazon S3 버킷으로 아이템이 전송(is dropped)이 된 경우 입니다. 예를 들어, 만약 주문이 되었을 때 이벤트가 발생한다면, 주문이 취소되는 이벤트도 존재할 수 있습니다. 이벤트는 메시징 시스템 또는 데이터베이스와 같은 다양한 것으로부터 가져올 수 있습니다.</p>
<p>이벤트는 응용 프로그램에서 발생한 사항에 대한 정보를 알려주는 JSON 개체입니다. 이벤트 중심 아키텍처에서 이벤트는 사실을 나타냅니다. 애플리케이션의 각 구성 요소는 변경 사항이 있을 때마다 이벤트를 발생시킵니다. 다른 구성 요소들은 듣고 이를 사용하여 무엇을 할 것인지, 그리고 어떻게 반응할 것인지를 결정합니다.</p>
<img src="/2022/05/01/Getting%20Started%20with%20Event-Driven%20Architecture/2022-05-02T084558.png" class="" title="event Json example">

<p>위의 이벤트는, Amazon S3 버킷에 이미지가 담겨졌을 때 S3가 발생하는 이벤트 입니다. Event Source는 sam-app-sourcebucket라는 이름을 가진 S3 버킷입니다. 이 버킷에 담겨진 Object는 “brad.jpeg” 입니다.</p>
<p>요청 기반의 어플리케이션은 요청을 완료하기 위해서 항상 다운스트림 함수에 직접적으로 명령을 전달하고 이것은 강하게 결합이 됩니다. 이것은 어플리케이션에서 오류가 언제 방생하는 것이지 결정하는 것을 어렵게 합니다. 이벤트 기반의 어플리케이션은 다른 서비스나 시스템에서 활용되어지는 이벤트를 발생합니다. 그러나 이벤트 생성하는 쪽에서는 이벤트를 어떠한 소비자(consumer)를 알지 못합니다. 이것은 전형적으로 느슨합 결합의 형태를 가지게 됩니다.</p>
<p>이벤트를 볼 수 있는 권한을 가진 어떠한 서비스라도 이벤트를 관찰할 수 있습니다. 커피숍의 예제를 생각해본다면 거기에는 커피를 내리고 있는 바리스타가 있고, 그리고 pastries를 만드는 파티쉐가 있습니다. 고객이 커피숍으로 들어오고 그리고 커피를 주문하면 파리스타는 커비를 내리기 시작하고 파티쉐는 아무 행동도 하지 않습니다.</p>
<p>그러나 만약 고객이 커피숍에 들어와 초콜릿 크로아상을 주문한다면 파티쉐는 초콜릿 크로아상을 만들기 시작합니다. 그리고 바리스타는 아무 행동을 하지 않을 것입니다. 파티쉐는 오직 파티쉐와 관련된 주문만을 관심하고 있고, 바리스타는 오직 커피와 관련된 주문에만 관심을 두고 있습니다.</p>
<p>아마존과 같은 E-commerce 에플리케이션 관점에서 본다면, 다른 이벤트에 응답을 주엉야 할 각각의 부서들이 있습니다. 아마존에서 Amazon Fresh의 Whole Food를 주문할 수 있다. Amazon Fresh에서 주문은 한다면 이 이벤트를 구독하고 있는 부서에는 그 이벤트를 처리하고 주문을 수행할 것이다.</p>
<img src="/2022/05/01/Getting%20Started%20with%20Event-Driven%20Architecture/2022-05-04T081857.png" class="" title="event Json example">

<p>이벤트 기반의 아키텍쳐와 커맨드 기반의 아키텍쳐는 각각 다른 방식으로 상태를 저장합니다. 전형적인 커맨드 기반의 아키텍쳐에서는, 컴포넌트들은 각 데이터의 최종상태를 업데이트를 수행합니다. 이벤트 기반의 아키텍쳐에서는 업데이트를 수행할 때 새로운 이벤트가 발생하도록 하면 됩니다. 설명하면 커멘드 기반의 아키텍쳐에서는 업데이트의 최종 업데이트 상태를 가지고 있지만, 이벤트 기반의 아키텍쳐에서는 발생한 모든 이벤트 전체를 가지고 있습니다.</p>
<h2 id="이벤트-기반-아키텍쳐의-장점"><a href="#이벤트-기반-아키텍쳐의-장점" class="headerlink" title="이벤트 기반 아키텍쳐의 장점"></a>이벤트 기반 아키텍쳐의 장점</h2><h3 id="이벤트의-소스와-Targer를-분리"><a href="#이벤트의-소스와-Targer를-분리" class="headerlink" title="이벤트의 소스와 Targer를 분리"></a>이벤트의 소스와 Targer를 분리</h3><p>많은 어플리케이션들은 각 컴포넌트가 강하게 결합되어 있고 서로가 강하게 의존하는 Monolith로 구성이 됩니다. 이것은 버그가 있고 애플리케이션의 실패하는 곳이 어느 부분인지 정확히 찾아내는 것에서 문제가 되는 것으로 판명되었습니다. 분리된 아키텍쳐는 느슨하게 결합된 서비스나 컴포넌트로 구성이 됩니다. 이벤트 주도적인 분리된 아키텍쳐에서는 이벤트는 누가 응답하는지 알지 못한채로 이벤트를 브로드캐스트 합니다. 이벤트를 수신하는 컴포넌트나 서비스가 이벤트를 처리할 준비가 될 때마다 이벤트를 대기열에 넣고,전달할 수 있기 때문에 이것은 좀 더 확장가능하고 변경에 열려있는 시스템을 개발할 수 있도록 합니다.</p>
<p>Decoupled 된 아키텍쳐는 팀이 독집적으로 행동할 수 있게 해주고 이는 개발 속도를 증가시킨다. 예를 들어 API를 기반으로 한 통합에서는 만약 내 팀이 다른 팀의 마이크로서비스에서 일어나는 변경에 대해서 알기를 원한다면 나는 나의 서비스를 위해서 그 팀이 만드는 API에 대해서 물어봐야 한다. 이것은 나는 다른 팀과 인증을 적절하게 처리해야 하며, 다른 팀과 API 호출을 위한 구조들에 대한 협의가 필요하다는 것을 의미합니다. 이것은 팀 사이를 왔다갔다하는 것을 야기시키며, 개발속도를 낮춥니다. 이벤트 주도적인 아키텍쳐에서는 마이크로서비스나 이벤트의 라우팅을 처리하고, 인증을 처리해주는 이벤트 라우터(예를 들어, Amazon EventBridge) 로부터 이벤트를 구독합니다.</p>
<p>Decoupled 어플리케이션은 새로운 기능을 보다 빨리 개발할 수 있게 합니다. 새로운 기능을 추가하는 것과 기존에 있는 기능을 확징하는 것은 이벤트 주도적인 아키텍쳐에서는 보다 간단한 일입니다. 새로운 기능을 실행하고 구독하는 데 필요한 이벤트만 선택하면 되기 때문입니다. 새로운 기능을 추가하기 위해 기존 서비스를 수정할 필요가 없습니다.</p>
<h3 id="Write-less-code"><a href="#Write-less-code" class="headerlink" title="Write less code"></a>Write less code</h3><p>Event-driven Architecture를 사용하여 애플리케이션을 만들 때 우리는 새로운 이벤트와 그 이벤트를 구독하는 서비스만 고려하면 되기 때문에 좀 더 적은 코드를 작성한다. 예를 들어, 애플리케이션에 새로운 기능을 만든 다면, 기존에 존재하는 이벤트를 고려한 후 이벤트 sender와 receiver을 추가하면 된다. 이렇게 하면 각 Functional Unit의 단위가 작고 작성되는 코드량이 작기 때문에 개발의 시간을 단축할 수 있다.</p>
<h3 id="Better-extensibility"><a href="#Better-extensibility" class="headerlink" title="Better extensibility"></a>Better extensibility</h3><p>위의 예제와 같이 배울 확장성 있는 애플리케이션을 만들었다. 다른 팀은 다른 마이크로 서비스에 영향을 미치지 않고 Feature를 확장할 수 있고, 기능을 추가할 수 있다. EventBridge를 사용하여 이벤트를 Publish 하므로, 애플리케이션은 기존 시스템과 통합될 뿐 아니라 모든 애플리케이션이 이벤트 Consumer로 통합될 수 있도록 합니다. 이벤트의 Producers는 이벤트 Consumer를 알지 못한다는 것은 마이크로서비스의 로직을 매우 단순화 할 수 있습니다.</p>
<h3 id="Enhancing-team-collaboration"><a href="#Enhancing-team-collaboration" class="headerlink" title="Enhancing team collaboration"></a>Enhancing team collaboration</h3><p>애플리케이션을 작성하는 일반적인 프로세스는 제품관리자와 비즈니스 이해 관계자와 협력하여 요구 사항을 수집하는 것입니다. 그리고 나서 개발자들은 이러한 요구사항으로부터 코드를 작성합니다. 그러나 이런 개발프로세스에서는 제품의 요구사항과 코드 사이에 간격이 존재합니다. 이벤트를 사용할 때, 비즈니스에 속한 모든 사람들은 로직을 이해할 수 있습니다. 애플리케이션에서 발생하는 이벤트(예를 들어, 고객이 물건을 카트에 담는다거나 고객 계정을 생성하거나)를 정의하면 그것은 제품의 요구사항이 됩니다. 어떠한 Action이 발생할 때마다, 그것은 이벤트를 만들어내고, 관심있는 사람은 누구나 그 Event에 대하여 로직을 수행하게 할 수 있습니다.</p>
<p>만약, 마케팅 담당자가 고객이 새로운 계정을 만들 때마다 어떠한 업무로직들을 수행할 수 있습니다. Event-Driven Architectur에서 이러한 것들을 구현하는 한 가지 방법은 새로운 계정 생성 이벤트를 수신하는 마케팅 이벤트 버스를 사용하는 것입니다. 또한 해당 이벤트를 구독하는 분석팀과 같이 관심이 있는 다른 팀이 있을 수도 있습니다. 각각의 팀&#x2F;서비스는 그들과 관련이 있는 이벤트를 구독할 수 있습니다. Event-Driven Architecture는 비즈니스를 수행하는 사람들이 그들이 비즈니스를 표한할 수 있는 좋은 방법입니다.</p>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>이 게시물에서는 이벤트를 소개하고 이벤트 기반 아키텍처를 명령 기반 요청-응답 아키텍처와 비교합니다. 또한 이벤트 소스 및 대상 분리, 코드 작성 감소, 확장성 향상, 팀 협업 향상 등 이벤트 기반 아키텍처의 이점에 대해 설명합니다.</p>
]]></content>
      <categories>
        <category>Architecure</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>eventdriven</tag>
      </tags>
  </entry>
  <entry>
    <title>비즈니스 결과로 연결하기</title>
    <url>/2022/05/03/Project%20To%20Product%2001/</url>
    <content><![CDATA[<img src="/2022/05/03/Project%20To%20Product%2001/2022-05-03T115153.png" class="" title="플로우 지표과 비즈니스 결과 연결하기">

<p>이번에는 서버리스를 도입하고 운영하기 위해서 어떤 점들을 고려해봐야 하는지에 대해서 작성해 보았습니다.</p>
<span id="more"></span>

<p>위의 그림은 플로우 지표와 비즈니스 지표를 어떻게 연결할 수 있는지를 보여주고 있다. 플로우 지표들은 살펴보았고(플로우 속도, 플로우 효율, 플로우 타입, 플로우 부하), 비즈니스 지표들은 이제 살펴보도록 하겠다. 아래의 표는 간단하게 이를 요약하고 있다.</p>
<table>
<thead>
<tr>
<th>비즈니스 결과</th>
<th>측정 방법</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td>가치</td>
<td>가치 흐름이 생산하는 비즈니스 이득</td>
<td>매출, 월간 고청 매출, 연간 계약 가치, 월간 활성 사용자</td>
</tr>
<tr>
<td>비용</td>
<td>비즈니스가 부담하는 가치 흐름 비용</td>
<td>가치 흐름을 위한 모든 인건비, 운영비, 인프라 비용, 가치 흐름에 할당된 전일제 환산(FTE, Full Time Equivalent)</td>
</tr>
<tr>
<td>품질</td>
<td>가치 흐름이 생산하는 제품이 고객에게 감지되는 품질</td>
<td>(고객에게) 드러난 결함, 쌓인 티켓 수, 계약 연장률, 확장률, 순수 고객 추천 지수(NPS)</td>
</tr>
<tr>
<td>행복도</td>
<td>가치 흐름 구성원의 몰입도</td>
<td>직원 추천 지수(eNPS), 직원 몰입</td>
</tr>
</tbody></table>
<h2 id="Measuring-Value-가치-측정하기"><a href="#Measuring-Value-가치-측정하기" class="headerlink" title="Measuring Value : 가치 측정하기"></a>Measuring Value : 가치 측정하기</h2><ul>
<li>측정 지표는 조직에서 사용하는 재무 지표에서 직접 가져와야 한다. </li>
<li>가치 흐름에 의해 생성된 수익 선행 지표, 즉 세이즈 파이프 라인 성장률, 고객 만족도(예를 들어 NPS)등을 가치 버킷에 넣을 수 있다.</li>
</ul>
<h2 id="Value-Stream-Cost-가치-흐름-비용"><a href="#Value-Stream-Cost-가치-흐름-비용" class="headerlink" title="Value Stream Cost : 가치 흐름 비용"></a>Value Stream Cost : 가치 흐름 비용</h2><ul>
<li>가치 흐름 비용은 특정 제품의 전달과 관련된 모든 비용을 포함한다. 해당 가치 흐름의 전달과 관련된 모든 것을 포함해 TCO(Total Cost of Ownership)을 고려하는 것과 비슷하며 제조업의 ‘가치 흐름별 비용 계산(Costing by value stream)’ 기법과도 유사하다. </li>
<li>가치 흐름 비용은 직접적인 비용뿐만 아니라 가치 흐름이 사용하는 공유 서비스 비용의 비율도 계산해야 한다. 여기에는 인건비(정직원 또는 계약직), 라이선스 비용, 인프라 비용(내부 또는 외부 호스팅) 등이 포함될 수 있다.</li>
</ul>
<h2 id="Value-Stream-Quality-가치-흐름-품질"><a href="#Value-Stream-Quality-가치-흐름-품질" class="headerlink" title="Value Stream Quality : 가치 흐름 품질"></a>Value Stream Quality : 가치 흐름 품질</h2><ul>
<li>가치 흐름은 고객에게 초점을 두고 있으므로 품질 버킷에는 고객에서 드러나는 종류의 지표를 사용해야 한다. 드러난 결함 뿐만 아니라 발생한 사건의 수, 티켓 개수, 기타 고객 만족 지표도 품질 버킷에 포함될 수 있다. 결함 수명(Defect Aging: 결함 인지부터 해소까지의 기간) 및 변경 성공률과 같이 고객에게 인지되지 않는 품질 지표는 품질 문제의 중요한 선행 지표이기는 하지만 플로우 프레임워크는 고개과 비즈니스에 가시적인 지표에 집중하므로 중요는 한 단계 아래이다.</li>
</ul>
<h2 id="Value-Stream-Happiness"><a href="#Value-Stream-Happiness" class="headerlink" title="Value Stream Happiness"></a>Value Stream Happiness</h2><ul>
<li>가치 흐름의 생산성은 화면 디자인, 자동화 테스트 작성 등 가치 창출 활동에 달려 있다. 앞으로 인공 지능이 테스트 코드를 자동으로 작성하는 것과 같이 자동화되는 분야가 늘어나더라도, 생산성은 언제나 팀에서 수행하는 창조적 작업에 달려 있음을 기술 기업들은 오래전부터 잘 알고 있었다. </li>
<li>성과가 좋은 조직은 이미 eNPS(직원 추천 지수)와 같은 지표를 통해 직원 참여도를 측정한다. Accelerate는 IT 조직에서 좋은 성과를 내느 조직의 직원이 그들의 조직을 일하기 좋은 곳으로 추천하는 경향이 2.2배 더 높음을 발표했다.</li>
</ul>
<h2 id="Value-Stream-Dashboards"><a href="#Value-Stream-Dashboards" class="headerlink" title="Value Stream Dashboards"></a>Value Stream Dashboards</h2><img src="/2022/05/03/Project%20To%20Product%2001/ValueStreamDashboards.png" class="" title="플로우 지표과 비즈니스 결과 연결하기">
]]></content>
      <categories>
        <category>Project To Product</category>
      </categories>
      <tags>
        <tag>Culture</tag>
        <tag>ProjectToProduct</tag>
      </tags>
  </entry>
  <entry>
    <title>Serverless Project Example</title>
    <url>/2022/05/08/Serverless%20Project%20Example/</url>
    <content><![CDATA[<p><a href="https://github.com/awsrun/aws-microservices">https://github.com/awsrun/aws-microservices</a></p>
<p><a href="https://www.youtube.com/watch?v=U5GZNt0iMZY">https://www.youtube.com/watch?v=U5GZNt0iMZY</a></p>
<p><a href="https://www.youtube.com/watch?v=ttJAIQf7cTw">https://www.youtube.com/watch?v=ttJAIQf7cTw</a></p>
<p>매우 좋은 셈플인 것 같다 이것을 참고로 뭔가를 하나 만들어봐야 겠다.</p>
<span id="more"></span>

<p>![122677923-1f72be80-d1ed-11eb-9a0f-d267756495e5](Serverless Project Example&#x2F;122677923-1f72be80-d1ed-11eb-9a0f-d267756495e5.PNG)</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Serverless</tag>
        <tag>Lambda</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>파괴추척</title>
    <url>/2022/05/09/Project%20To%20Product-%ED%8C%8C%EA%B4%B4%EC%B6%94%EC%A0%81/</url>
    <content><![CDATA[<h1 id="파괴추적"><a href="#파괴추적" class="headerlink" title="파괴추적"></a>파괴추적</h1><p>플로우 프레임워크의 관점으로 볼 때 자동차 사업에서 기능 추가, 결함 수정, 리스크 완화라는 숫자의 제로섬 게임이 벌어지고 있으리라는 것을 이제 우리는 잘 알고 있다. 자동차 산업 전반적으로 다르 플로우 아이템보다 기능에 우선순위를 높게 부여한 트레이드오프로서 지금의 품질 저하가 나타난 것이다. 품짇을 희생해 기능 플로우 우선순위를 높게 부여하는 것이 항상 나쁘다는 것은 아니다. 트위터 같은 인터넷 스케일 기업이 시스템을 확장하던 초창기에는 여러 품질 문제가 흔하게 일어났음에도 결국 시장에서 성공을 거둘 수 있었다. 그러나 이러한 트레이드오프는 반드시 앞으로 예상되는 비즈니스 결과를 염두에 두고 이뤄져야 한다. 이러한 맥락에서 리콜 발생률은 자동차의 여러 소프트웨어 구성 요소 플로우 분포가 상황에 맞도록 조정이 필요하다는 것을 시사한다.</p>
 <span id="more"></span>

<p>플로우 속도를 플로우 타임을 줄이면서 기능을 전달하려는 기업의 가치 흐름에 품질을 갖추기 위한 새로운 투자가 필요하다는 것이 명확해진다. 단기적으로 이 투자는 기능 전달을 희생해 이뤄질 것이다. 여기에서 <strong>플로우 프레임워크의 가설은 너무 많은 플로우 분포가 기능에 할당되면 결국 기술 부채</strong>로 이어진다는 것이다. 다시 말해 <strong>리콜 발생률이 안정화될 때까지는 결함 수정과 기술 부채를 줄이는 데 집중해야 한다는 의미다</strong>.</p>
<h2 id="에퀴팩스의-리스크-문제"><a href="#에퀴팩스의-리스크-문제" class="headerlink" title="에퀴팩스의 리스크 문제"></a>에퀴팩스의 리스크 문제</h2><p>1899년 미국에서 설립된 이래로 에퀴팩스는 미국 고객의 금융 정보 및 개인 정보를 보관해 오고 있었다. 2018 애퀴팩스의 보안 사고가 발생했을 때 약 1억 4,550만 명의 고객 계정이 피해를 입었다. 경영진은 이전 시대를 지내며 데이터 보호라는 핵심 기능을 마스터했던 기업을, 전환점을 지나는 동안 기업 핵심 자산을 대규모로 누출하는 결과로 이끈 것이다.</p>
<p>청문회에서 CEO는 개발자 한 명에게 책임이 있음을 주장했다. 자동차 제조사의 CEO들을 안전성과 보안이 생산 프로세스에서 특히 체계적이며 견고한 부분이 돼야 한다는 것을 똑똑히 이해하고 있다. 이와 대조적으로 에퀴팩스 CEO의 발언은 전통적인 비즈니스 관리 방법과 소프트웨어 시대의 생산 수단 사이의 단절 상태를 보여준다.</p>
<p>거대 기술 기업 및 스타트업과 경쟁할 때 많은 기업이 새로운 디지털 서비스를 전달해야 한다는 압박감을 느낀다. 이를 위해서 리스크에 대한 우선순위를 낮추고 고객 눈에 보이는 기능과 품질에 집중하려 할 것이다. 그러나 소프트웨어 전달 팀의 백로그에 쌓이는 기술 부채는 경영진에게 보이지 않는다. 플로운 분포 불균형의 원인이 무엇이었든 간에 결과는 기업과 해당 기업 서비스를 이용하던 미국 시민에게 재앙이었다.</p>
<p>디지털 제품을 보호하거나 기능 전달 속도를 유지하는 등 경영 전략을 위해 경영진이 어떤 플로우 분포에 투자해야 하는지 이해하고 결정할 수 있게 하는 것이 IT언어와 현실을 비즈니스에 연결하는 방법이다. <strong>여기서 플로우 프레임워크의 가설은 에퀴팩스가 주요 가치 흐름내에서 리스크 및 기술 부채에 대한 우선순위 선정에 실패</strong>했다는 것이다.</p>
<h2 id="기술-부채와-노키아의-몰락"><a href="#기술-부채와-노키아의-몰락" class="headerlink" title="기술 부채와 노키아의 몰락"></a>기술 부채와 노키아의 몰락</h2><p>낮은 품질, 느린 기능 전달 속도, 보안 리스크는 오늘날 디지털 상품의 소비자인 우리가 늘 겪는 일이다. 이어질 노키아 이야기는 기술 부채가 가치 흐름 및 기업 성공에 미티는 눈에 잘 보이지 않는 영향을 중심으로 전개된다.</p>
<p>심비안 시리즈 60에는 엄청난 양의 기술 부채가 축적돼 있었다. 심비안 시리즈 40은 훨신 간단한 구조였기 때문에 경영지은 이와 같은 기술 부채를 다루는 방법에 익숙지 않았다. 부채 수준은 소스 코드나 아키텍처를 넘어 전체 가치 흐름과 운영 그리고 소프트웨어 제공 게획까지 스며들어 있었다. 40시리즈를 만들 때는 기술자가 조직을 운영하고 있었기 때문에 이렇게 심각한 수준의 기술 부채가 OS에 존재하지 않았다. 기술 부채가 무엇인지 알고 있는 마이크로소프트에서 온 스테판 엘롭은 기술과 비즈니스 모두에서 문제점을 찾아냈다. 여기에서 <strong>플로우 프레임워크의 가설은 플로우가 부채와 기존 아키텍처에 의해 심한 방해를 받아 플랫폼이 막다른 골목을 마주하게 됐다는 것</strong>이다. 활주로와 자본이 고갈되기 전에 새로운 플랫폼에 대한 투자가 이뤄졌어야 한다.</p>
<h2 id="마이크로소프트의-제품-전달"><a href="#마이크로소프트의-제품-전달" class="headerlink" title="마이크로소프트의 제품 전달"></a>마이크로소프트의 제품 전달</h2><p>다른 젊은 회사들에 비해 마이크로소프트는 감당할 수 없는 양의 기술 부채를 쌓고 소프트웨어 복잡도를 늘리며 외부에 노출되는 부분을 만들 기회가 많았다. 이는 기능 전달이 멈추거나 정교하고 치밀한 해킹에 노출될 가능성을 높여 시장에서의 지위를 잃게 만들 수도 있었다. 그러나 마이크로소프트는 소프트웨어 포트폴리오 운영 방법에 근본적인 차별성이 있었다. 이들은 처음부터 제품 지향적 운영을 해왔던 것이다.</p>
<p>플로우 프레임워크 관점에서 게이츠의 의사 결정을 바라보면 그는 먼저 리스크에 집중한 뒤 기술 부채에 집중하도록 조직에 방향성을 제공했다는 것을 알 수 있다. 또한 그 눔금들이 10까지 올라갔다는 것은 기능 전달의 눈금이 곧 0으로 낮춰짐을 의미한다는 것을 그가 잘 인식하고 있었음을 보여준다.</p>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>BMW 그룹의 혁신을 위한 인프라와 마이크로소프트가 만들어낸 인프라 사이에는 매우 중요한 공통점이 있다. BMW, 마이크로소프트와 같은 고성과 기업은 비즈니스와 생산 수단이 서로 연결돼 있다는 점이다. 노키아 사례에서 변혁의 발목을 잡은 기술 부채를 인식하지 못한 것은 개발자가 아니라 비즈니스였다. 그 결과 기술 부채를 해결하기 위한 계획을 세울 수 없었다.</p>
<p>빌 게이츠와 마이크로소프트의 경영진은 소프트웨어 엔지니어링이라는 배경이 있으므로 그들의 의사 결정력과 비즈니스에 미치는 영향력은 내재한 능력일 것이다. 위태로운 많은 기업 중에서 성공하는 기업을 돕는 요인 중 하나는 경영진이 트레이드오프를 결정할 수 있는가에 달려 있을 것이다. 오늘날 기술 기업의 키를 쥐고 있는 개발자 출신의 경영자가 불균형적으로 많은 이유는 그들의 소프트웨어 개발 경험이 기능,결함,리스크,기술 부채 플로우에 대한 이해를 제공했기 때문일 것이다.</p>
<p>오늘날의 비즈니스 리더와 기술자들이 서로 연결되고 그 틈이 더는 벌어지지 않고 줄어들 수 있도록 소프트웨어 전달 기법들을 향상해야 한다. 이를 위해 기술자 및 비즈니스 이해관계자 모두가 정확한 정보로 좋은 의사 결정을 내릴 수 있도록 하는 공통의 언어가 필요하다.</p>
]]></content>
      <categories>
        <category>Project To Product</category>
      </categories>
      <tags>
        <tag>Culture</tag>
        <tag>ProjectToProduct</tag>
      </tags>
  </entry>
  <entry>
    <title>기업 툴 네트워크의 실측 정보</title>
    <url>/2022/05/13/Project%20To%20Product-07/</url>
    <content><![CDATA[<h1 id="기업-툴-네트워크의-실측-정보"><a href="#기업-툴-네트워크의-실측-정보" class="headerlink" title="기업 툴 네트워크의 실측 정보"></a>기업 툴 네트워크의 실측 정보</h1><p>  가치 흐름 네트워크를 생성하고 연결하는 방법을 이해하기 전에 기업 IT 툴 네트워크의 실측 정보를 이해해야 한다. 전력망과 발전소를 통해 전기가 흐르는 것을 시각화하는 툴이 필요하듯 소프트웨어 협업과 지식 창출을 추적하는 툴을 통해 지식 노동의 흐름을 시각화하는 새로운 방법이 필요하다. </p>
<span id="more"></span>

<p><strong>IT와 소프트웨어 투자에 올바른 결정을 내리고자 하는 모든 사람은 반드시 비즈니스 가치 흐름 차원에서 소프트웨어 전달을 이해해야 한다.</strong> </p>
<h2 id="실측-정보-구하기"><a href="#실측-정보-구하기" class="headerlink" title="실측 정보 구하기"></a>실측 정보 구하기</h2><p>  대규모 생산의 품질과 가변성을 통제할 수 있게 된 것은 린 운동 덕분이다. 린 관리의 기본적인 부분 중 하나는 겜바 워크 개념이다. 가치가 창출되는 곳을 직접 확인해 기업 리더십을 생산의 본질과 연결하는 것이 겜바 워크 개념의 핵심이다.  </p>
<h3 id="개발자의-하루-첫-번째-깨달음"><a href="#개발자의-하루-첫-번째-깨달음" class="headerlink" title="개발자의 하루 : 첫 번째 깨달음."></a>개발자의 하루 : 첫 번째 깨달음.</h3><p>소프트웨어 아키텍처 기능인 코딩 활동과 가치 흐름을 흐르는 작업 사이의 단절이 원이이었다. 이러한 단절이 개발자의 생산성에 가장 큰 병목 지점이며 내가 경함한 단절임을 깨달았다. 실험에 참여한 개발자들이 참여했던 더 큰 규모의 소프트웨어의 경우 가치 흐름의 규모가 훨씬 커지기 때문에 문제가 더 심각했다.</p>
<blockquote>
<p>첫 번째 깨달음 : 소프트웨어의 규모가 커짐에 따라 소프트웨어 생산성이 감소하고 스래싱이 증가하는 것은 아키텍쳐와 가치 흐름 사이의 단절 때문이다. </p>
</blockquote>
<h3 id="누락된-게층-두-번째-깨달음"><a href="#누락된-게층-두-번째-깨달음" class="headerlink" title="누락된 게층: 두 번째 깨달음"></a>누락된 게층: 두 번째 깨달음</h3><p>운영 인프라와 배포 자동화 및 통합 관리 방법의 부족은 소프트웨어 아키텍쳐 뿐만 아니라 운영 인프라 또한 가치 흐름과 단절돼 있었다는 것을 의미했다. 이번 관찰을 통해 프로젝트 관리 모델, 엔드 투 엔드 전달 아키텍처 그리고 가치 흐름 사이의 단절이 소프트웨어 생산성의 병목 지점이 된다는 두 번째 깨달음을 얻게 됐다. </p>
<blockquote>
<p>두 번째 깨달음: 단절된 소프트웨어 가치 흐름은 소프트웨어 생산성의 병목 지점이다. 이러한 가치 흐름 단절 원인은 프로젝트 관리 모델의 잘못된 사용에 있다. </p>
</blockquote>
<h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>7장에서 살펴본 툴의 급증과 조직의 전체적인 인프라 계층 부족은 나를 두 번째 깨달음으로 이끌었다. 소프트웨어 가치 흐름의 단절은 소프트웨어 생산성에서 가장 심각한 병목 지점이다. 이러한 단절의 문제는 비즈니스 이해관계자부터 지원 부서의 구성원에 이르는 모든 소프트웨어 전문가에게 걸쳐 있다. 이는 제품 지향적 소프트웨어 가치 흐름상 앤드 투 엔즈 전달 아키텍처와 프로젝트 우녕ㅇ 모델이 잘못 조정돼 발생한다. </p>
]]></content>
      <categories>
        <category>Project To Product</category>
      </categories>
      <tags>
        <tag>Culture</tag>
        <tag>ProjectToProduct</tag>
      </tags>
  </entry>
  <entry>
    <title>나에게 이런 일은 없을 줄 알았다.</title>
    <url>/2022/05/13/journal-01/</url>
    <content><![CDATA[<p>여러분 건강은 건강할 때 잘 지키세요…</p>
<span id="more"></span>

<h2 id="첫-번째-주제는-건강이다"><a href="#첫-번째-주제는-건강이다" class="headerlink" title="첫 번째 주제는 건강이다."></a>첫 번째 주제는 건강이다.</h2><p>건강은 건강할 때 지켜야 한다는 말을 들었던 것 같다. 어디서 이런 말이 나왔는지는 모르겠지만 지난 겨울에 건강검진에서 갑상선에 결절이 있다는 말을 들었을 때도 많은 사람들이 가지고 있는 것이라서 이것에 대해서 많이 생각하지는 않았었던 것 같다. 그리고 세침 검사로 암인지 확인해 보자고 할 때도 의사가 50% 암일 수도 있고 아닐 수도 있다고 이야기해서 아닐지 알았다. ㅋㅋㅋ “암이 쉽게 걸리나?”</p>
<h2 id="갑상선암"><a href="#갑상선암" class="headerlink" title="갑상선암"></a>갑상선암</h2><p>하지만 두둥 12월에 건강검진을 받고 3월 초에 암이 확률이 매우 높다면 수술을 해야 한다는 말을 들었다. 이 때도 생각이 매우 무지 많았었다. 이걸 알아보기 위해서 차병원,중앙대병원을 거쳐서 세브란스 병원에 유명한 의사분에게 일정을 잡았다. 차병원에서는 3월말에서 4월 초를 &#x2F; 중앙대에서는 4월 말로 수술일 정을 제안했었다. 하지만 지인의 소개로 세브란스 병원에서 6월 8일날 수술을 받기로 하고 심란한 마음을 달래며 일을 하고 있었다. 하지만 이것은 연속된 사건의 첫 번째 일뿐이었다.</p>
<p>사실 갑산성암은 많이 걸리는 암이고, 진행속도도 더디다는 이야기가 찾아보니 많이 나왔다. 하지만 막상 걸려보니 내가 왜 이런 병에 걸렸을까? 그래도 위험하지 않을까? 혹시 다른데로 전이되면 어떻게 하지 등등 별의 별 생각이 다들고 몇일 동안은 일이 손에 잡히지 않았다. 기분도 우울하고. 그리고 세브란스에서 임파선에 전이가 되었다는 말을 추가로 들었다. 4월 초였나…?? 이말을 듣고 더 심란했다. 암이 아닐줄 알았던 순간부터 내가 바라던 좋은 방향과는 반대 방향으로만 가고 있기 때문에…</p>
<p>하지만 일단 6월 8일로 수술 일정을 확정하고 마음을 다 잡고 생활하고 있었다. 딱 그럴 때 두 번째 불운? 행운이 찾아왔다.</p>
<h2 id="게실염"><a href="#게실염" class="headerlink" title="게실염"></a>게실염</h2><p>이름도 생소한 게실염…. 4월 초였나? 부산으로 출장을 다녀왔다. 3박 4일 좋은 분들과 바람되 쐬고, 워크샵도 하고 일도 잘되었다. 그리고 나서 2일 교육을 들었다. 그런데 아마도 과식? 과로 때문인지는 몰라도 주말에 배가 아팠다. 배가 아픈 양상이 달라서 동네병원에 가보니 이건 담낭염이 의심된다고 당장 응급실로 가보라는 말을 들었다. 헐..!! 갑상선도 충격적인데 두번째 일이라니.. 그래서 중앙대 병원을 가니 불행중 다행으로 게실염이란다 하지만 심한 통증을 동반하지 않아서 그냥 죽만먹고 나일론 환자처럼 땡글땡글 돌아다니면 놀았다.</p>
<p>평상시에 병원에서 쉬는 것도 괜찮겠다는 말을 농담반 진담반으로 했는데 병원은 노는 곳이 아니었다. 치료받는 것은 쉬는 것이 아니라는 것을 진심으로 알게 되었다. 항상 팔에는 주사 바늘이 꽂혀있고, 새벽에도 시간마다 와서 체온도 측정하고, 혈압도 측정했다. 그리고 몇일에 한번은 새벽에 와서 피검사도 했다. 당연히 치료받는 것은 쉬는 것이 아니었다.</p>
<p>나일론 치료를 바도 있던 중 충격적인 소식을 들었다. 간에… 간에… 뭔가 있다는 이야기를..</p>
<p>헉… 헉….</p>
<p>그리고 CT와 MRI를 찍었다. 아무것도 아니었을까? 아니면 갑상선암의 과정처럼 뭔가였을가?? 이건 다음 글에 적어보겠다.</p>
]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>암</tag>
        <tag>병원</tag>
        <tag>건강</tag>
        <tag>갑상선암</tag>
      </tags>
  </entry>
  <entry>
    <title>전문화된 툴과 가치흐름</title>
    <url>/2022/05/19/Project%20To%20Product-08/</url>
    <content><![CDATA[<h2 id="전문화된-툴과-가치흐름"><a href="#전문화된-툴과-가치흐름" class="headerlink" title="전문화된 툴과 가치흐름"></a>전문화된 툴과 가치흐름</h2><p>서로 단절된 툴들이 가치 흐름에서 심각한 파편화를 일으키고 있었다는 사실을 명확이 할게 됐다. 파편화는 개발자의 생산성을 극단적으로 감소시켜 조직 구성원 차원에서 영향을 미쳤고 지직 차원에서도 유사한 문제가 발생했다. 그렇다면 해결책은 무엇인가? 모든 것을 단일 툴에 집어넣으면 되는가? 오늘날 시장의 애자일 및 데브옵스 툴 네트워크의 복잡성 수준만 감안한다면 근본적인 변화가 있는 것일가? 역사적으로 마일린이나 최근에는 슬랙이 제공하는 것처럼 여러 툴에 걸친 정보를 하나의 인터페이스를 통해 제공하는 새로운 툴을 통해 문제를 해결할 수 있는가? 아니면 좀 더 근복적인 인프라 문제가 도사리고 있는가?</p>
<span id="more"></span>

<h3 id="기능적-전문화와-툴의-급증"><a href="#기능적-전문화와-툴의-급증" class="headerlink" title="기능적 전문화와 툴의 급증"></a>기능적 전문화와 툴의 급증</h3><p>소프트웨어 전달은 하나의 툴만 사용하는 하나의 팀에서만 담당하기에 너무 복잡해졌다. 개발자 업무 시간의 심각한 낭비, 그 낭비가 IT 전문가 사이에 퍼지는 현상 그리고 전문 툴의 급증 모두 동일한 문제에서 비롯된다. IT 노동력 분업화와 함께 생겨난 변화가 여러 IT 직원이 사용하는 툴의 전문화로 이어졌다.</p>
<img src="/2022/05/19/Project%20To%20Product-08/2022-05-20T092648.png" class="" title="툴체인의 범주">

<p>308개 기업 IT의 툴 네트워크를 연구한 결과 두 종류의 복잡성을 찾아낼 수 있었다.</p>
<ul>
<li>근복적 복잡성 : 비즈니스 가치 플로우 개선을 위해 전문성을 갖춘 이해관계자의 요구 사항을 수용하면서 발생한 툴의 이질성. 연구 자료에서 예를 들면 자바 애플리케이션을 개발하는 조직은 아틀라시간의 지라를 더 많이 사용한는 반면, 닷넷 및 애저 환경에서 개발하는 조직은 마이크로소프로 VSTS를 더 많이 사용하고 있었다.</li>
<li>우연적 복잡성 : 비즈니스 가치 플로우 개선과 관계없이 발생한 툴의 이질성. 인수 합병의 결과로 툴을 넘겨받는 경우나 중앙 집중형 관리가 부족해 비슷한 툴을 팀별로 각자 선택하는 경우가 이 범주에 속한다. 예를 들어 한 조긱은 세 가지 버그 트래커를 보유할 수 있다. (1) 20년 전에 사내에서 개발된 낡은 레거시 툴 (2) 개발자가 선호하는 새로운 이슈 트레커 (3) 인수에 의한 오픈소스 이슈 트레커</li>
</ul>
<p>가치 흐름 아키텍처 관점에서 두 가지 유형의 복잡성 모두 신경써야 한다. 일종의 가치 흐름 부채로 볼 수 있는 우연적 복잡성은 지속적 노력으로 줄여 나가야 한다. 가치 흐름을 조사하면서 근본적 복잡성에 대한 다음과 같은 사례를 식별했다.</p>
<ul>
<li>이해관계자 전문화 : 소프트웨어 전달의 다양한 이해관겨자는 각각의 분야에 효과적인 서로 다른 툴을 필요로 한다. 지원 담당자는 SLA, ITIL &#x2F; 개발자는 코드 리뷰와 커밋을 위한</li>
<li>규모 전문화 : 어떤 툴은 조직의 규모에 전문화 되어 있다. 십여 팀을 관리할 수 있는가? 아니면 수천 명의 엔지니어 복잡한 업무를 사용하는 툴인가?</li>
<li>플랫폼 전문화 : 해당 플랫폼에 전문화된 툴을 제공한다. MS는 배포 플랫폼으로 애저에 최적화된 E2E Devops&#x2F;Agile 툴을 제공하고, AW는 그에 준하는 다른 툴을 제공한다.</li>
<li>영역 전문화 : 실험적인 영역의 제품을 개발하기 위해서 아주 가벼운 트레킹 툴을 사용할 것인가? 아니면 성장한 제품을 관리하는 복잡한(거버넌스, 위험, 규정 준수 툴)을 사용할 것인가?</li>
<li>레거시 : 오래된 툴이 거나 그냥 우리 부서에서 만들어서 사용하는 것..</li>
<li>공급자 다양성 : 오픈소스 소프트웨어 사용과 아웃소싱의 증가에 따라 소프트웨어 공급업체가 아웃소싱 업체와 똑같은 툴을 사용할 것이라는 기대는 현실적이지 못하다.</li>
</ul>
<h3 id="가치-흐름에서-단절-확인하기"><a href="#가치-흐름에서-단절-확인하기" class="headerlink" title="가치 흐름에서 단절 확인하기"></a>가치 흐름에서 단절 확인하기</h3><p>사용자 연구 및 지금까지 살펴본 사례 중에서, 특히 플로우 아이템을 저장하는 툴 네트워크의 특정 부분에서 스래싱 현상(프로세스의 처리시간보다 페이지 교체시간이 더 많아지는 현상)이 일어나고 있었다.</p>
]]></content>
      <categories>
        <category>Project To Product</category>
      </categories>
      <tags>
        <tag>Culture</tag>
        <tag>ProjectToProduct</tag>
      </tags>
  </entry>
  <entry>
    <title>수술의 여정</title>
    <url>/2022/06/22/%EC%88%98%EC%88%A0%EC%9D%98-%EC%8B%9C%EC%9E%91/</url>
    <content><![CDATA[<p>몰랐다. 정말 내가 수술이라는 것을 받는 다는 것을 상상해 본적도 없었다. 그런데 처음으로 하는 수술이 간절제 수술이라니… 심지어 술과 담배도 안하는 내가…. 혹시나 저와 비슷한 여정이 있을 분들도 있을 거라고 생각이 되어 기억이 가물가물 해지기 전에 글로 좀 남겨보려고 합니다.</p>
<span id="more"></span>

<h2 id="D-2-수술-전-검사"><a href="#D-2-수술-전-검사" class="headerlink" title="D-2 수술 전 검사"></a>D-2 수술 전 검사</h2><p>토요일날 오후 4시에 입원을 했다. 정확한 것은 좀 더 자세히 기록을 보고 이야기해 드려야 하겠지만 입원하는 첫날은 매우 간단한 검사를 했었던 것 같다. 그리고 첫날은 아무런 닝겔(?) 혹은 라인을 달지 않는다. 그냥 멀쩡한 몸으로 돌아다니며 검사를 받는다. 아산병원이라서 그런건지 큰 병원들은 그런 것인지는 모르겠지만 병실에서 받는 피검사야 누워서 받으면 되는데, 이동해야 하는 검사들의 경우에는 이송 직원 분들이 오셔서 데려간다. 때로는 휠체어로 처음엔 어색했지만 병원이 너무 크고 복잡하기도 하고, 수술을 받고 걷기도 힘들 상황에서는 매우 도움이 많이 되었다. </p>
<p>그렇게 떨리는 첫날밤 아무것도 안하고 그냥 잔다. 물론 병원에서 잠을 깊게 잘 수가 없다. 새벽에도 오셔서 컨티션을 끊임없이 체크하고, 심지어 새벽 2시쯤에 피를 뽑아가기도 하신다. 그래서 깊은 잠을 쭉 자기는 쉽지 않다. </p>
<h2 id="D-1-수술-전-검사"><a href="#D-1-수술-전-검사" class="headerlink" title="D-1 수술 전 검사"></a>D-1 수술 전 검사</h2><p>아침… 아산병원이라 그런지 간이라 그런지는 모르겠지만 간관련 해서 입원하시는 분들은 아침에 2가지를 무조건 매일 해야 한다. 바로 X-RAY 촬영과 체중에 대한 기록이다. 아마도 체중에 변화가 매우 민감한 장기라서 그런 것 같기도 하다. 문제는 시간이다. 앞에서 이야기한데로 잠을 깊이 잘 수가 없어서 헤롱 거리고 있는 상태에서 두가지 검사를 매일 매우 이른 시간에 해야 한다. 체중은 6시 쯤으로 기억하고, 체중을 기록하고 나면 바로 이송요원들이 와서 X-RAY 촬영을 한다. 그렇기 때문에 무조건 6시가 쫌 넘어가면 강제적으로 일어나야 한다. 일요일 아침을 마지막으로 먹고 기약없는 금식에 들어간다. 수술하기전에 CT 촬영을 일요일날 했다. CT검사 전 최소 7시간은 금식을 해야 하기 때문에 아침을 8시쯤 먹은 이후에 아무것도 먹지 않는다. 심지어 물도. ㅠㅠ</p>
<img src="/2022/06/22/%EC%88%98%EC%88%A0%EC%9D%98-%EC%8B%9C%EC%9E%91/picosolution.jpg" class="" title="피코솔루션">

<p>별로 들어간 것도 없는 상태이지만 이날 해야 하는 중요한 몇 가지가 있는데 그 중의 하나가 장 청소(?), 장을 비워야 한다. 대장 내시경을 받을 때 그 포카리스웨트에 소다를 푼 이상한 것을 먹어야 하나 걱정하고 있었지만 그렇지는 않다. 뭔가 그 보다 덜 역한 것을 원샷으로 마시고, 이후에 천천히 물을 2시간에 걸쳐서 1리터를 마신다. 이후에 한 사이클 더한다. 그렇게 하면 신기하게도 속에 있는 전부가 비워진다. </p>
<p>그리고 수술할 부위에 제모를 한다. 세상 처음해 보는 경험이었지만 제모 크림을 발라주는 분이 매우 상황에 대한 공감을 많이 해주시면 괜찮을 것 같다는 말씀을 많이 해주셔서 고마웠다는 생각이 났다. 사실 병원 생활에서 의사 선생님들과 이야기를 나누는 것은 전체 병원 생활의 5%~10% 정도 밖에 안되는 것 같다. 이분들은 음…. 뭐랄까 너무 바쁜 분들이라 뭔가 질문을 해도 안될 것 같고 그렇다….. 쩝.. 이건 나 중에 한번 더 이야기할 수 있으면 따로 하겠다. 생각이 많아지는 영역이었다. </p>
<p>그리고 깨끗한 피부와 깨끗한 장을 가진 체로 잠이 든다. </p>
<h2 id="D-Day"><a href="#D-Day" class="headerlink" title="D-Day"></a>D-Day</h2><p>수술날 아침도 여전히 X-RAY와 체중검사로 시작을 하고 아무것도 먹지 않기 때문에 그냥 긴장하면서 시간을 보낸다. 1시쯤 보호자가 도착해여 이야기를 나누고 수술 시간을 차분이 기다리는 것이 이날 일과의 전부였던 것 같다. 그리고 대망의 수술 시간이 다가온다. 나는 오후 3시 수술 예정이었지만 약간 늦은 시간에 들어갔다. 환자복만 입고 휠체어를 타고 수술방으로 내려간다. 내려가서 이상한 방에 덩그러니 혼자 휠체어에 않아 길지 않은 시간 많은 것을 생각했던 것 같다. 가능한 아무 생각하지 않는 것이 좋은 것 같지만.. 그러다 보면 휠체어를 끌고 수술방으로 나를 이끄는 분이 도착하여 나는 수술방으로 안내한다. </p>
<p>수술 침대가 매우 차가울 것이라고 생각했는데 매우 푹신했고 매우 따뜻했다. 그리고 의사선생님들과 간호사 선생님들의 이런 저런 말소리가 들렸다. 순간 궁금해졌던 것은 저분들은 수술 중에 일상적인 이야기들을 할까? 아니면 수술에 대해서만 이야기 할까? 이런 저런 생각을 했었던 것 같다. 그리고 입에 마스크를 대고 마취과 선생님이 말을 했었다. 심호흡을 하라고 한 두번쯤 했을까? 눈이 흐려지기 시작하고 3번째 심호흡을 이후는 생각나지 않는다. 그리고 수술을 끝났다. </p>
<p>대략 8시 30분에서 9시 사이에 다시 병실로 돌아온 것 같다. 수술 전에는 금식시 영양을 공급하기 위해 팔에 잡은 라인 밖에 없었지만 수술 후에는 소변줄, 콧줄, 그리고 목 아래 중심정맥 라인이 잡혀 있다. 아참 그리고 마약성 진통제도 달려 있다. 얼마전 펜실베니아에서 사람들이 기괴하게 움직이는 원인이 되는 마약인 펜타닐에 대한 다큐멘터리를 보았는데 바로 그 펜타닐이 달려 있다. 이때 부터는 확실하게 수술을 실감할 수 있다. 한번 움직이는 것 뿐만 아니라 자세를 조금 바꾸는 것도 매우 거추장 스러운 일이 된다. 그리고 생각이 잘 나지 않는다 드문 드문 보호자가 깨우는 목소리만 들렸다. 마취가 완전히 깨지 않아서 정신이 몽롱한 상태이다. 여기서 잠들면 폐 속에 남아 있는 마취 가스가 빠지지 않아서 3시간은 깨어 있는 채로 숨을 잘 쉬어줘야 한다고 한다. 하지만 혼자 의지로 깨어있는 것은 불가능하다. 3시간만 잘 깨어 있으면 잠을 잘 수 있다. 잠은 잘잤다. 마취가 덜 풀려서 그런 것인지?? 아닌지는 모르겠지만 </p>
<p>사실 소변줄은 느낌이 이상해서 그렇지 생각보다 편한다. 왜냐하면 화장실을 가지 않아도 되기 때문이다. 하지만 콧줄은 정말 헬(hell)이다. 이것은 불편한 것에만 그치지 않고, 구역질을 일으킨다. 정말 레알 힘들다. 콧줄 나머지는 많이 달려 있지만 아프거나 심히 불편하지는 않다. 하지만 콧줄은 숨쉬기도 움직이기도 쉽지 않다. 그냥 존재 자체가 겁나 불편하다. </p>
<h2 id="D-1"><a href="#D-1" class="headerlink" title="D+1"></a>D+1</h2><p>오전 10시 쯤인가 와서 병실에서 X-Ray를 찍었다. 병실에 와서 X-Ray를 찍어주는 유일한 때이다. 아무래도 움직이기가 쉽지 않아서 그런 것인것 같다. 매우 고마웠다. X-Ray를 엄청 기다리는데 기다리는 이유는 바로 이것이 잘 나와야 콧줄과 소변줄이 제거될 수 있기 때문이다. 소변줄은 그냥 불편한 느낌이 있지만 콧줄은 정말 불편해서 빨리 뺐으면 좋겠다는 생각이 아주 강하게 있었다. 그리고 콧줄을 빼면 물을 마실 수 있다. 일요일 아침부터 물을 마시지 못했는데, 화요일이 되어서여 비로소 물을 마실 수 있다. </p>
<p>X-Ray를 찍고나서 간호사 선생님이 병실을 한바퀴 돌수 있다면 두 줄을 제거시켜 주겠다고 한다하시어 좀 이른 감이 있지만 한바퀴 산책을 했다. 그리고 나서 바로 두가지의 줄을 뽑았다. 하지만 매우 많은 나머지 줄을 주렁주렁 달고 있기 때문에 움직이기는 쉽지 않다 거기다가 2가지 때문에 움직이기가 쉽지 않은데 하나는 배에 구멍을 뚫었기 때문에 배에 힘이 들어갈 때마다 배가 매우 아프다. 두번째는 중심정맥관이 목에 꽂혀 있기 때문에 목을 움직이기가 쉽지 않다. 일어나 있는 상태에서 움직이는 것, 누워있는 상태에서 움직이는 것은 어렵지가 않으나… 일어났다가 눕는 것, 눕다가 일어나는 것이 매우 어렵다. 이것은 보호자의 도움이 필요하다. 혹은 내가 요령을 잘 찾아내야 한다. “덜” 아프게 일어나는 법, “덜” 아프게 눕는 법을 터득해야 한다. </p>
<p>ㅋㅋ 물만 먹을 수 있고 아직 밥은 먹을 수가 없다. </p>
]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>암</tag>
        <tag>병원</tag>
        <tag>건강</tag>
        <tag>간암</tag>
      </tags>
  </entry>
</search>
